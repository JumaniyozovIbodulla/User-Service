// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: join_events.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JoinEventService_Create_FullMethodName  = "/join_events.JoinEventService/Create"
	JoinEventService_GetById_FullMethodName = "/join_events.JoinEventService/GetById"
	JoinEventService_Delete_FullMethodName  = "/join_events.JoinEventService/Delete"
)

// JoinEventServiceClient is the client API for JoinEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinEventServiceClient interface {
	Create(ctx context.Context, in *CreateJoinEvent, opts ...grpc.CallOption) (*JoinEvent, error)
	GetById(ctx context.Context, in *JoinEventPrimaryKey, opts ...grpc.CallOption) (*JoinEvent, error)
	Delete(ctx context.Context, in *JoinEventPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type joinEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinEventServiceClient(cc grpc.ClientConnInterface) JoinEventServiceClient {
	return &joinEventServiceClient{cc}
}

func (c *joinEventServiceClient) Create(ctx context.Context, in *CreateJoinEvent, opts ...grpc.CallOption) (*JoinEvent, error) {
	out := new(JoinEvent)
	err := c.cc.Invoke(ctx, JoinEventService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinEventServiceClient) GetById(ctx context.Context, in *JoinEventPrimaryKey, opts ...grpc.CallOption) (*JoinEvent, error) {
	out := new(JoinEvent)
	err := c.cc.Invoke(ctx, JoinEventService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinEventServiceClient) Delete(ctx context.Context, in *JoinEventPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoinEventService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoinEventServiceServer is the server API for JoinEventService service.
// All implementations must embed UnimplementedJoinEventServiceServer
// for forward compatibility
type JoinEventServiceServer interface {
	Create(context.Context, *CreateJoinEvent) (*JoinEvent, error)
	GetById(context.Context, *JoinEventPrimaryKey) (*JoinEvent, error)
	Delete(context.Context, *JoinEventPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedJoinEventServiceServer()
}

// UnimplementedJoinEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJoinEventServiceServer struct {
}

func (UnimplementedJoinEventServiceServer) Create(context.Context, *CreateJoinEvent) (*JoinEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedJoinEventServiceServer) GetById(context.Context, *JoinEventPrimaryKey) (*JoinEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedJoinEventServiceServer) Delete(context.Context, *JoinEventPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedJoinEventServiceServer) mustEmbedUnimplementedJoinEventServiceServer() {}

// UnsafeJoinEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinEventServiceServer will
// result in compilation errors.
type UnsafeJoinEventServiceServer interface {
	mustEmbedUnimplementedJoinEventServiceServer()
}

func RegisterJoinEventServiceServer(s grpc.ServiceRegistrar, srv JoinEventServiceServer) {
	s.RegisterService(&JoinEventService_ServiceDesc, srv)
}

func _JoinEventService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJoinEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinEventServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoinEventService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinEventServiceServer).Create(ctx, req.(*CreateJoinEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinEventService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinEventPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinEventServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoinEventService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinEventServiceServer).GetById(ctx, req.(*JoinEventPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinEventService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinEventPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinEventServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoinEventService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinEventServiceServer).Delete(ctx, req.(*JoinEventPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// JoinEventService_ServiceDesc is the grpc.ServiceDesc for JoinEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoinEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "join_events.JoinEventService",
	HandlerType: (*JoinEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JoinEventService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _JoinEventService_GetById_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JoinEventService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "join_events.proto",
}
