// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: managers.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagersService_Create_FullMethodName  = "/managers.ManagersService/Create"
	ManagersService_GetById_FullMethodName = "/managers.ManagersService/GetById"
	ManagersService_GetAll_FullMethodName  = "/managers.ManagersService/GetAll"
	ManagersService_Update_FullMethodName  = "/managers.ManagersService/Update"
	ManagersService_Delete_FullMethodName  = "/managers.ManagersService/Delete"
)

// ManagersServiceClient is the client API for ManagersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagersServiceClient interface {
	Create(ctx context.Context, in *CreateManager, opts ...grpc.CallOption) (*Manager, error)
	GetById(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Manager, error)
	GetAll(ctx context.Context, in *GetListManagersRequest, opts ...grpc.CallOption) (*GetListManagersResponse, error)
	Update(ctx context.Context, in *UpdateManager, opts ...grpc.CallOption) (*Manager, error)
	Delete(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type managersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagersServiceClient(cc grpc.ClientConnInterface) ManagersServiceClient {
	return &managersServiceClient{cc}
}

func (c *managersServiceClient) Create(ctx context.Context, in *CreateManager, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, ManagersService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersServiceClient) GetById(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, ManagersService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersServiceClient) GetAll(ctx context.Context, in *GetListManagersRequest, opts ...grpc.CallOption) (*GetListManagersResponse, error) {
	out := new(GetListManagersResponse)
	err := c.cc.Invoke(ctx, ManagersService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersServiceClient) Update(ctx context.Context, in *UpdateManager, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, ManagersService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersServiceClient) Delete(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ManagersService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagersServiceServer is the server API for ManagersService service.
// All implementations must embed UnimplementedManagersServiceServer
// for forward compatibility
type ManagersServiceServer interface {
	Create(context.Context, *CreateManager) (*Manager, error)
	GetById(context.Context, *ManagerPrimaryKey) (*Manager, error)
	GetAll(context.Context, *GetListManagersRequest) (*GetListManagersResponse, error)
	Update(context.Context, *UpdateManager) (*Manager, error)
	Delete(context.Context, *ManagerPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedManagersServiceServer()
}

// UnimplementedManagersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagersServiceServer struct {
}

func (UnimplementedManagersServiceServer) Create(context.Context, *CreateManager) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedManagersServiceServer) GetById(context.Context, *ManagerPrimaryKey) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedManagersServiceServer) GetAll(context.Context, *GetListManagersRequest) (*GetListManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedManagersServiceServer) Update(context.Context, *UpdateManager) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedManagersServiceServer) Delete(context.Context, *ManagerPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedManagersServiceServer) mustEmbedUnimplementedManagersServiceServer() {}

// UnsafeManagersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagersServiceServer will
// result in compilation errors.
type UnsafeManagersServiceServer interface {
	mustEmbedUnimplementedManagersServiceServer()
}

func RegisterManagersServiceServer(s grpc.ServiceRegistrar, srv ManagersServiceServer) {
	s.RegisterService(&ManagersService_ServiceDesc, srv)
}

func _ManagersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagersService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServiceServer).Create(ctx, req.(*CreateManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagersService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagersService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServiceServer).GetById(ctx, req.(*ManagerPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagersService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagersService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServiceServer).GetAll(ctx, req.(*GetListManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagersService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServiceServer).Update(ctx, req.(*UpdateManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagersService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagersService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServiceServer).Delete(ctx, req.(*ManagerPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagersService_ServiceDesc is the grpc.ServiceDesc for ManagersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "managers.ManagersService",
	HandlerType: (*ManagersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagersService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ManagersService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ManagersService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagersService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ManagersService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managers.proto",
}
