// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: groups.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupsService_Create_FullMethodName  = "/groups.GroupsService/Create"
	GroupsService_GetById_FullMethodName = "/groups.GroupsService/GetById"
	GroupsService_GetAll_FullMethodName  = "/groups.GroupsService/GetAll"
	GroupsService_Update_FullMethodName  = "/groups.GroupsService/Update"
	GroupsService_Delete_FullMethodName  = "/groups.GroupsService/Delete"
)

// GroupsServiceClient is the client API for GroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsServiceClient interface {
	Create(ctx context.Context, in *CreateGroup, opts ...grpc.CallOption) (*Group, error)
	GetById(ctx context.Context, in *GroupPrimaryKey, opts ...grpc.CallOption) (*Group, error)
	GetAll(ctx context.Context, in *GetListGroupsRequest, opts ...grpc.CallOption) (*GetListGroupsResponse, error)
	Update(ctx context.Context, in *UpdateGroup, opts ...grpc.CallOption) (*Group, error)
	Delete(ctx context.Context, in *GroupPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type groupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServiceClient(cc grpc.ClientConnInterface) GroupsServiceClient {
	return &groupsServiceClient{cc}
}

func (c *groupsServiceClient) Create(ctx context.Context, in *CreateGroup, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) GetById(ctx context.Context, in *GroupPrimaryKey, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) GetAll(ctx context.Context, in *GetListGroupsRequest, opts ...grpc.CallOption) (*GetListGroupsResponse, error) {
	out := new(GetListGroupsResponse)
	err := c.cc.Invoke(ctx, GroupsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) Update(ctx context.Context, in *UpdateGroup, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) Delete(ctx context.Context, in *GroupPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GroupsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServiceServer is the server API for GroupsService service.
// All implementations must embed UnimplementedGroupsServiceServer
// for forward compatibility
type GroupsServiceServer interface {
	Create(context.Context, *CreateGroup) (*Group, error)
	GetById(context.Context, *GroupPrimaryKey) (*Group, error)
	GetAll(context.Context, *GetListGroupsRequest) (*GetListGroupsResponse, error)
	Update(context.Context, *UpdateGroup) (*Group, error)
	Delete(context.Context, *GroupPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedGroupsServiceServer()
}

// UnimplementedGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServiceServer struct {
}

func (UnimplementedGroupsServiceServer) Create(context.Context, *CreateGroup) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupsServiceServer) GetById(context.Context, *GroupPrimaryKey) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedGroupsServiceServer) GetAll(context.Context, *GetListGroupsRequest) (*GetListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGroupsServiceServer) Update(context.Context, *UpdateGroup) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupsServiceServer) Delete(context.Context, *GroupPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupsServiceServer) mustEmbedUnimplementedGroupsServiceServer() {}

// UnsafeGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServiceServer will
// result in compilation errors.
type UnsafeGroupsServiceServer interface {
	mustEmbedUnimplementedGroupsServiceServer()
}

func RegisterGroupsServiceServer(s grpc.ServiceRegistrar, srv GroupsServiceServer) {
	s.RegisterService(&GroupsService_ServiceDesc, srv)
}

func _GroupsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Create(ctx, req.(*CreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).GetById(ctx, req.(*GroupPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).GetAll(ctx, req.(*GetListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Update(ctx, req.(*UpdateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Delete(ctx, req.(*GroupPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsService_ServiceDesc is the grpc.ServiceDesc for GroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groups.GroupsService",
	HandlerType: (*GroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _GroupsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GroupsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups.proto",
}
