// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: administrators.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdministratorsService_Create_FullMethodName  = "/administrators.AdministratorsService/Create"
	AdministratorsService_GetById_FullMethodName = "/administrators.AdministratorsService/GetById"
	AdministratorsService_GetAll_FullMethodName  = "/administrators.AdministratorsService/GetAll"
	AdministratorsService_Update_FullMethodName  = "/administrators.AdministratorsService/Update"
	AdministratorsService_Delete_FullMethodName  = "/administrators.AdministratorsService/Delete"
)

// AdministratorsServiceClient is the client API for AdministratorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministratorsServiceClient interface {
	Create(ctx context.Context, in *CreateAdminstrator, opts ...grpc.CallOption) (*Adminstrator, error)
	GetById(ctx context.Context, in *AdminstratorPrimaryKey, opts ...grpc.CallOption) (*Adminstrator, error)
	GetAll(ctx context.Context, in *GetListAdminstratorsRequest, opts ...grpc.CallOption) (*GetListAdminstratorsResponse, error)
	Update(ctx context.Context, in *UpdateAdminstrator, opts ...grpc.CallOption) (*Adminstrator, error)
	Delete(ctx context.Context, in *AdminstratorPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type administratorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorsServiceClient(cc grpc.ClientConnInterface) AdministratorsServiceClient {
	return &administratorsServiceClient{cc}
}

func (c *administratorsServiceClient) Create(ctx context.Context, in *CreateAdminstrator, opts ...grpc.CallOption) (*Adminstrator, error) {
	out := new(Adminstrator)
	err := c.cc.Invoke(ctx, AdministratorsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) GetById(ctx context.Context, in *AdminstratorPrimaryKey, opts ...grpc.CallOption) (*Adminstrator, error) {
	out := new(Adminstrator)
	err := c.cc.Invoke(ctx, AdministratorsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) GetAll(ctx context.Context, in *GetListAdminstratorsRequest, opts ...grpc.CallOption) (*GetListAdminstratorsResponse, error) {
	out := new(GetListAdminstratorsResponse)
	err := c.cc.Invoke(ctx, AdministratorsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) Update(ctx context.Context, in *UpdateAdminstrator, opts ...grpc.CallOption) (*Adminstrator, error) {
	out := new(Adminstrator)
	err := c.cc.Invoke(ctx, AdministratorsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsServiceClient) Delete(ctx context.Context, in *AdminstratorPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdministratorsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorsServiceServer is the server API for AdministratorsService service.
// All implementations must embed UnimplementedAdministratorsServiceServer
// for forward compatibility
type AdministratorsServiceServer interface {
	Create(context.Context, *CreateAdminstrator) (*Adminstrator, error)
	GetById(context.Context, *AdminstratorPrimaryKey) (*Adminstrator, error)
	GetAll(context.Context, *GetListAdminstratorsRequest) (*GetListAdminstratorsResponse, error)
	Update(context.Context, *UpdateAdminstrator) (*Adminstrator, error)
	Delete(context.Context, *AdminstratorPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedAdministratorsServiceServer()
}

// UnimplementedAdministratorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdministratorsServiceServer struct {
}

func (UnimplementedAdministratorsServiceServer) Create(context.Context, *CreateAdminstrator) (*Adminstrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdministratorsServiceServer) GetById(context.Context, *AdminstratorPrimaryKey) (*Adminstrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAdministratorsServiceServer) GetAll(context.Context, *GetListAdminstratorsRequest) (*GetListAdminstratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAdministratorsServiceServer) Update(context.Context, *UpdateAdminstrator) (*Adminstrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdministratorsServiceServer) Delete(context.Context, *AdminstratorPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdministratorsServiceServer) mustEmbedUnimplementedAdministratorsServiceServer() {}

// UnsafeAdministratorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorsServiceServer will
// result in compilation errors.
type UnsafeAdministratorsServiceServer interface {
	mustEmbedUnimplementedAdministratorsServiceServer()
}

func RegisterAdministratorsServiceServer(s grpc.ServiceRegistrar, srv AdministratorsServiceServer) {
	s.RegisterService(&AdministratorsService_ServiceDesc, srv)
}

func _AdministratorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminstrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Create(ctx, req.(*CreateAdminstrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminstratorPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).GetById(ctx, req.(*AdminstratorPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAdminstratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).GetAll(ctx, req.(*GetListAdminstratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminstrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Update(ctx, req.(*UpdateAdminstrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminstratorPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServiceServer).Delete(ctx, req.(*AdminstratorPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministratorsService_ServiceDesc is the grpc.ServiceDesc for AdministratorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministratorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrators.AdministratorsService",
	HandlerType: (*AdministratorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdministratorsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _AdministratorsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AdministratorsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdministratorsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdministratorsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrators.proto",
}
