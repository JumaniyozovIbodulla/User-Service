// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: lessons.proto

package schedule_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LesssonService_Create_FullMethodName  = "/lessons.LesssonService/Create"
	LesssonService_GetById_FullMethodName = "/lessons.LesssonService/GetById"
	LesssonService_GetAll_FullMethodName  = "/lessons.LesssonService/GetAll"
	LesssonService_Update_FullMethodName  = "/lessons.LesssonService/Update"
)

// LesssonServiceClient is the client API for LesssonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LesssonServiceClient interface {
	Create(ctx context.Context, in *CreateLesson, opts ...grpc.CallOption) (*Lesson, error)
	GetById(ctx context.Context, in *LessonPrimaryKey, opts ...grpc.CallOption) (*Lesson, error)
	GetAll(ctx context.Context, in *GetListLessonRequest, opts ...grpc.CallOption) (*GetListLesssonResponse, error)
	Update(ctx context.Context, in *UpdateLesson, opts ...grpc.CallOption) (*Lesson, error)
}

type lesssonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLesssonServiceClient(cc grpc.ClientConnInterface) LesssonServiceClient {
	return &lesssonServiceClient{cc}
}

func (c *lesssonServiceClient) Create(ctx context.Context, in *CreateLesson, opts ...grpc.CallOption) (*Lesson, error) {
	out := new(Lesson)
	err := c.cc.Invoke(ctx, LesssonService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesssonServiceClient) GetById(ctx context.Context, in *LessonPrimaryKey, opts ...grpc.CallOption) (*Lesson, error) {
	out := new(Lesson)
	err := c.cc.Invoke(ctx, LesssonService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesssonServiceClient) GetAll(ctx context.Context, in *GetListLessonRequest, opts ...grpc.CallOption) (*GetListLesssonResponse, error) {
	out := new(GetListLesssonResponse)
	err := c.cc.Invoke(ctx, LesssonService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesssonServiceClient) Update(ctx context.Context, in *UpdateLesson, opts ...grpc.CallOption) (*Lesson, error) {
	out := new(Lesson)
	err := c.cc.Invoke(ctx, LesssonService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LesssonServiceServer is the server API for LesssonService service.
// All implementations must embed UnimplementedLesssonServiceServer
// for forward compatibility
type LesssonServiceServer interface {
	Create(context.Context, *CreateLesson) (*Lesson, error)
	GetById(context.Context, *LessonPrimaryKey) (*Lesson, error)
	GetAll(context.Context, *GetListLessonRequest) (*GetListLesssonResponse, error)
	Update(context.Context, *UpdateLesson) (*Lesson, error)
	mustEmbedUnimplementedLesssonServiceServer()
}

// UnimplementedLesssonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLesssonServiceServer struct {
}

func (UnimplementedLesssonServiceServer) Create(context.Context, *CreateLesson) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLesssonServiceServer) GetById(context.Context, *LessonPrimaryKey) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedLesssonServiceServer) GetAll(context.Context, *GetListLessonRequest) (*GetListLesssonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedLesssonServiceServer) Update(context.Context, *UpdateLesson) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLesssonServiceServer) mustEmbedUnimplementedLesssonServiceServer() {}

// UnsafeLesssonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LesssonServiceServer will
// result in compilation errors.
type UnsafeLesssonServiceServer interface {
	mustEmbedUnimplementedLesssonServiceServer()
}

func RegisterLesssonServiceServer(s grpc.ServiceRegistrar, srv LesssonServiceServer) {
	s.RegisterService(&LesssonService_ServiceDesc, srv)
}

func _LesssonService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLesson)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesssonServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesssonService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesssonServiceServer).Create(ctx, req.(*CreateLesson))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesssonService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LessonPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesssonServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesssonService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesssonServiceServer).GetById(ctx, req.(*LessonPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesssonService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesssonServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesssonService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesssonServiceServer).GetAll(ctx, req.(*GetListLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesssonService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLesson)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesssonServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesssonService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesssonServiceServer).Update(ctx, req.(*UpdateLesson))
	}
	return interceptor(ctx, in, info, handler)
}

// LesssonService_ServiceDesc is the grpc.ServiceDesc for LesssonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LesssonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lessons.LesssonService",
	HandlerType: (*LesssonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LesssonService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _LesssonService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _LesssonService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LesssonService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessons.proto",
}
